{"version":3,"sources":["webpack:///./src/views/message/message.vue","webpack:///message.vue","webpack:///./src/views/message/message.vue?2837","webpack:///./src/views/message/message.vue?94a3"],"names":[],"mappings":";;;;;;AACA;AACA,uBAA0Q;;AAE1Q;AACA;AACA;AACA;AACA,yBAAsG;AACtG;AACA;AACA;AACA;AACA;AACA;AACA,+EAA+E,iDAAiD,IAAI;AACpI,mCAAmC;;AAEnC;AACA,YAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,CAAC;;AAED;;;;;;;;;;;;;;;;ACWA;;8DACA;;;0BAIA;AAFA;;4CAIA;kGACA;AAEA;AAJA;AAJA,eASA;AACA;4DACA;;;0BAGA;0BAEA;AAHA;;4CAKA;kGACA;AAEA;AAJA;AALA,eAUA;AACA;wDACA;;;0BAIA;AAFA;;4CAIA;kGACA;AAEA;AAJA;AAJA,eASA;AACA;;4BAEA;2BACA;4BACA;4BACA;gCACA;8BACA;yBACA;0BACA;6BACA;wBACA;;uBAEA;sBACA;yBAEA;AAJA;;uBAYA;qBACA;uBACA;0BACA;mDACA;;;oDAGA;yDACA;6DACA;6EACA;wDACA;AAEA;AAPA;AADA,kCASA;AAEA;AAjBA,aADA;uBAoBA;qBACA;uBACA;uBACA;mDACA;;;kCAIA;kCAEA;AAHA;;oCAOA;AAHA;AALA,sBADA;;kCAYA;kCAEA;AAHA;AADA,mDAMA;AAEA;AAxBA;uBA0BA;qBACA;uBACA;uBACA;mDACA;+DACA;wCACA,kBAEA;uEACA;wCACA,iBAEA;2BACA;wCACA,eAEA;AACA;AAIA;AAtBA;AAjEA;AAwFA;;;8CAEA;gCACA;4BACA;0CACA;2BACA;4BACA;8BACA;8BACA;uFACA;AACA;sDACA;oCACA;AACA;4DACA;sCACA;mCACA;kCACA;2CACA;2CACA;kCACA;2CACA;mBACA;kCACA;2CACA;AACA;AACA;+CAEA;6BACA;8CACA;;gFACA;;sFACA;;oFACA;;8DACA;;4DAEA;;+BACA;AAEA;AAvCA;gCAwCA;;mBAGA;kBAEA;AAHA,SADA;mBAMA;kBAEA;AAHA;mBAKA;kBAGA;AAJA;;mBAOA;kBAGA;AAJA,SADA;;mBAQA;kBAGA;AAJA,SADA;8CAMA;gDACA;mDACA;AACA;;;mDAEA;mCACA;AACA;qDACA;oCACA;AACA;qDACA;uCACA;AAEA;AAVA;AAvMA,E;;;;;;;ACzCA,yC;;;;;;;ACAA,gBAAgB,mBAAmB,aAAa,0BAA0B;AAC1E;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA,GAAG;AACH,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,C","file":"16.chunk.js","sourcesContent":["\n/* styles */\nrequire(\"!!../../../node_modules/extract-text-webpack-plugin/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true}!vue-style-loader!css-loader?minimize!../../../node_modules/vue-loader/lib/style-compiler/index?{\\\"id\\\":\\\"data-v-4a8089d6\\\",\\\"scoped\\\":false,\\\"hasInlineConfig\\\":false}!autoprefixer-loader!less-loader!../../../node_modules/vue-loader/lib/selector?type=styles&index=0!./message.vue\")\n\nvar Component = require(\"!../../../node_modules/vue-loader/lib/component-normalizer\")(\n  /* script */\n  require(\"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./message.vue\"),\n  /* template */\n  require(\"!!../../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-4a8089d6\\\"}!../../../node_modules/vue-loader/lib/selector?type=template&index=0!./message.vue\"),\n  /* scopeId */\n  null,\n  /* cssModules */\n  null\n)\nComponent.options.__file = \"/Users/august/Open/iview-admin/src/views/message/message.vue\"\nif (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== \"default\" && key !== \"__esModule\"})) {console.error(\"named exports are not supported in *.vue files.\")}\nif (Component.options.functional) {console.error(\"[vue-loader] message.vue: functional components are not supported with templates, they should use render functions.\")}\n\n/* hot reload */\nif (module.hot) {(function () {\n  var hotAPI = require(\"vue-loader/node_modules/vue-hot-reload-api\")\n  hotAPI.install(require(\"vue\"), false)\n  if (!hotAPI.compatible) return\n  module.hot.accept()\n  if (!module.hot.data) {\n    hotAPI.createRecord(\"data-v-4a8089d6\", Component.options)\n  } else {\n    hotAPI.reload(\"data-v-4a8089d6\", Component.options)\n  }\n})()}\n\nmodule.exports = Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/views/message/message.vue\n// module id = 686\n// module chunks = 16","<style lang=\"less\">\n    @import './message.less';\n</style>\n\n<template>\n    <div class=\"message-main-con\">\n        <div class=\"message-mainlist-con\">\n            <div>\n                <Button @click=\"setCurrentMesType('unread')\" size=\"large\" long type=\"text\"><transition name=\"mes-current-type-btn\"><Icon v-show=\"currentMessageType === 'unread'\" type=\"checkmark\"></Icon></transition><span class=\"mes-type-btn-text\">未读消息</span><Badge class=\"message-count-badge-outer\" class-name=\"message-count-badge\" :count=\"unreadCount\"></Badge></Button>\n            </div>\n            <div>\n                <Button @click=\"setCurrentMesType('hasread')\" size=\"large\" long type=\"text\"><transition name=\"mes-current-type-btn\"><Icon v-show=\"currentMessageType === 'hasread'\" type=\"checkmark\"></Icon></transition><span class=\"mes-type-btn-text\">已读消息</span><Badge class=\"message-count-badge-outer\" class-name=\"message-count-badge\" :count=\"hasreadCount\"></Badge></Button>\n            </div>\n            <div>\n                <Button @click=\"setCurrentMesType('recyclebin')\" size=\"large\" long type=\"text\"><transition name=\"mes-current-type-btn\"><Icon v-show=\"currentMessageType === 'recyclebin'\" type=\"checkmark\"></Icon></transition><span class=\"mes-type-btn-text\">回收站</span><Badge class=\"message-count-badge-outer\" class-name=\"message-count-badge\" :count=\"recyclebinCount\"></Badge></Button>\n            </div>\n        </div>\n        <div class=\"message-content-con\">\n            <transition name=\"view-message\">\n                <div v-if=\"showMesTitleList\" class=\"message-title-list-con\">\n                    <Table ref=\"messageList\" :columns=\"mesTitleColumns\" :data=\"currentMesList\" :no-data-text=\"noDataText\"></Table>\n                </div>\n            </transition>\n            <transition name=\"back-message-list\">\n                <div v-if=\"!showMesTitleList\" class=\"message-view-content-con\">\n                    <div class=\"message-content-top-bar\">\n                        <span class=\"mes-back-btn-con\"><Button type=\"text\" @click=\"backMesTitleList\"><Icon type=\"chevron-left\"></Icon>&nbsp;&nbsp;返回</Button></span>\n                        <h3 class=\"mes-title\">{{ mes.title }}</h3>\n                    </div>\n                    <p class=\"mes-time-con\"><Icon type=\"android-time\"></Icon>&nbsp;&nbsp;{{ mes.time }}</p>\n                    <div class=\"message-content-body\">\n                        <p class=\"message-content\">{{ mes.content }}</p>\n                    </div>\n                </div>\n            </transition>\n        </div>\n    </div>\n</template>\n\n<script>\nexport default {\n    data () {\n        const markAsreadBtn = (h, params) => {\n            return h('Button', {\n                props: {\n                    size: 'small'\n                },\n                on: {\n                    click: () => {\n                        this.hasreadMesList.unshift(this.currentMesList.splice(params.index, 1)[0]);\n                    }\n                }\n            }, '标为已读');\n        };\n        const deleteMesBtn = (h, params) => {\n            return h('Button', {\n                props: {\n                    size: 'small',\n                    type: 'error'\n                },\n                on: {\n                    click: () => {\n                        this.recyclebinList.unshift(this.hasreadMesList.splice(params.index, 1)[0]);\n                    }\n                }\n            }, '删除');\n        };\n        const restoreBtn = (h, params) => {\n            return h('Button', {\n                props: {\n                    size: 'small'\n                },\n                on: {\n                    click: () => {\n                        this.hasreadMesList.unshift(this.recyclebinList.splice(params.index, 1)[0]);\n                    }\n                }\n            }, '还原');\n        };\n        return {\n            currentMesList: [],\n            unreadMesList: [],\n            hasreadMesList: [],\n            recyclebinList: [],\n            currentMessageType: 'unread',\n            showMesTitleList: true,\n            unreadCount: 0,\n            hasreadCount: 0,\n            recyclebinCount: 0,\n            noDataText: '暂无未读消息',\n            mes: {\n                title: '',\n                time: '',\n                content: ''\n            },\n            mesTitleColumns: [\n                // {\n                //     type: 'selection',\n                //     width: 50,\n                //     align: 'center'\n                // },\n                {\n                    title: ' ',\n                    key: 'title',\n                    align: 'left',\n                    ellipsis: true,\n                    render: (h, params) => {\n                        return h('a', {\n                            on: {\n                                click: () => {\n                                    this.showMesTitleList = false;\n                                    this.mes.title = params.row.title;\n                                    this.mes.time = this.formatDate(params.row.time);\n                                    this.getContent(params.index);\n                                }\n                            }\n                        }, params.row.title);\n                    }\n                },\n                {\n                    title: ' ',\n                    key: 'time',\n                    align: 'center',\n                    width: 180,\n                    render: (h, params) => {\n                        return h('span', [\n                            h('Icon', {\n                                props: {\n                                    type: 'android-time',\n                                    size: 12\n                                },\n                                style: {\n                                    margin: '0 5px'\n                                }\n                            }),\n                            h('span', {\n                                props: {\n                                    type: 'android-time',\n                                    size: 12\n                                }\n                            }, this.formatDate(params.row.time))\n                        ]);\n                    }\n                },\n                {\n                    title: ' ',\n                    key: 'asread',\n                    align: 'center',\n                    width: 100,\n                    render: (h, params) => {\n                        if (this.currentMessageType === 'unread') {\n                            return h('div', [\n                                markAsreadBtn(h, params)\n                            ]);\n                        } else if (this.currentMessageType === 'hasread') {\n                            return h('div', [\n                                deleteMesBtn(h, params)\n                            ]);\n                        } else {\n                            return h('div', [\n                                restoreBtn(h, params)\n                            ]);\n                        }\n                    }\n                }\n            ]\n        };\n    },\n    methods: {\n        formatDate (time) {\n            let date = new Date(time);\n            let year = date.getFullYear();\n            let month = date.getMonth() + 1;\n            let day = date.getDate();\n            let hour = date.getHours();\n            let minute = date.getMinutes();\n            let second = date.getSeconds();\n            return year + '/' + month + '/' + day + '  ' + hour + ':' + minute + ':' + second;\n        },\n        backMesTitleList () {\n            this.showMesTitleList = true;\n        },\n        setCurrentMesType (type) {\n            this.currentMessageType = type;\n            if (type === 'unread') {\n                this.noDataText = '暂无未读消息';\n                this.currentMesList = this.unreadMesList;\n            } else if (type === 'hasread') {\n                this.noDataText = '暂无已读消息';\n                this.currentMesList = this.hasreadMesList;\n            } else {\n                this.noDataText = '回收站无消息';\n                this.currentMesList = this.recyclebinList;\n            }\n        },\n        getContent (index) {\n            // you can write ajax request here to get message content\n            let mesContent = '';\n            switch (this.currentMessageType + index) {\n                case 'unread0': mesContent = '这是您点击的《欢迎登录iView-admin后台管理系统，来了解他的用途吧》的相关内容。'; break;\n                case 'unread1': mesContent = '这是您点击的《使用iView-admin和iView-ui组件库快速搭建你的后台系统吧》的相关内容。'; break;\n                case 'unread2': mesContent = '这是您点击的《喜欢iView-admin的话，欢迎到github主页给个star吧》的相关内容。'; break;\n                case 'hasread0': mesContent = '这是您点击的《这是一条您已经读过的消息》的相关内容。'; break;\n                default: mesContent = '这是您点击的《这是一条被删除的消息》的相关内容。'; break;\n            }\n            this.mes.content = mesContent;\n        }\n    },\n    mounted () {\n        this.currentMesList = this.unreadMesList = [\n            {\n                title: '欢迎登录iView-admin后台管理系统，来了解他的用途吧',\n                time: 1507390106000\n            },\n            {\n                title: '使用iView-admin和iView-ui组件库快速搭建你的后台系统吧',\n                time: 1507390106000\n            },\n            {\n                title: '喜欢iView-admin的话，欢迎到github主页给个star吧',\n                time: 1507390106000\n            }\n        ];\n        this.hasreadMesList = [\n            {\n                title: '这是一条您已经读过的消息',\n                time: 1507330106000\n            }\n        ];\n        this.recyclebinList = [\n            {\n                title: '这是一条被删除的消息',\n                time: 1506390106000\n            }\n        ];\n        this.unreadCount = this.unreadMesList.length;\n        this.hasreadCount = this.hasreadMesList.length;\n        this.recyclebinCount = this.recyclebinList.length;\n    },\n    watch: {\n        unreadMesList (arr) {\n            this.unreadCount = arr.length;\n        },\n        hasreadMesList (arr) {\n            this.hasreadCount = arr.length;\n        },\n        recyclebinList (arr) {\n            this.recyclebinCount = arr.length;\n        }\n    }\n};\n</script>\n\n\n\n\n// WEBPACK FOOTER //\n// message.vue?390c1fd6","// removed by extract-text-webpack-plugin\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/extract-text-webpack-plugin/loader.js?{\"omit\":1,\"remove\":true}!./~/vue-style-loader!./~/css-loader?minimize!./~/vue-loader/lib/style-compiler?{\"id\":\"data-v-4a8089d6\",\"scoped\":false,\"hasInlineConfig\":false}!./~/autoprefixer-loader!./~/less-loader!./~/vue-loader/lib/selector.js?type=styles&index=0!./src/views/message/message.vue\n// module id = 782\n// module chunks = 16","module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('div', {\n    staticClass: \"message-main-con\"\n  }, [_c('div', {\n    staticClass: \"message-mainlist-con\"\n  }, [_c('div', [_c('Button', {\n    attrs: {\n      \"size\": \"large\",\n      \"long\": \"\",\n      \"type\": \"text\"\n    },\n    on: {\n      \"click\": function($event) {\n        _vm.setCurrentMesType('unread')\n      }\n    }\n  }, [_c('transition', {\n    attrs: {\n      \"name\": \"mes-current-type-btn\"\n    }\n  }, [_c('Icon', {\n    directives: [{\n      name: \"show\",\n      rawName: \"v-show\",\n      value: (_vm.currentMessageType === 'unread'),\n      expression: \"currentMessageType === 'unread'\"\n    }],\n    attrs: {\n      \"type\": \"checkmark\"\n    }\n  })], 1), _c('span', {\n    staticClass: \"mes-type-btn-text\"\n  }, [_vm._v(\"未读消息\")]), _c('Badge', {\n    staticClass: \"message-count-badge-outer\",\n    attrs: {\n      \"class-name\": \"message-count-badge\",\n      \"count\": _vm.unreadCount\n    }\n  })], 1)], 1), _vm._v(\" \"), _c('div', [_c('Button', {\n    attrs: {\n      \"size\": \"large\",\n      \"long\": \"\",\n      \"type\": \"text\"\n    },\n    on: {\n      \"click\": function($event) {\n        _vm.setCurrentMesType('hasread')\n      }\n    }\n  }, [_c('transition', {\n    attrs: {\n      \"name\": \"mes-current-type-btn\"\n    }\n  }, [_c('Icon', {\n    directives: [{\n      name: \"show\",\n      rawName: \"v-show\",\n      value: (_vm.currentMessageType === 'hasread'),\n      expression: \"currentMessageType === 'hasread'\"\n    }],\n    attrs: {\n      \"type\": \"checkmark\"\n    }\n  })], 1), _c('span', {\n    staticClass: \"mes-type-btn-text\"\n  }, [_vm._v(\"已读消息\")]), _c('Badge', {\n    staticClass: \"message-count-badge-outer\",\n    attrs: {\n      \"class-name\": \"message-count-badge\",\n      \"count\": _vm.hasreadCount\n    }\n  })], 1)], 1), _vm._v(\" \"), _c('div', [_c('Button', {\n    attrs: {\n      \"size\": \"large\",\n      \"long\": \"\",\n      \"type\": \"text\"\n    },\n    on: {\n      \"click\": function($event) {\n        _vm.setCurrentMesType('recyclebin')\n      }\n    }\n  }, [_c('transition', {\n    attrs: {\n      \"name\": \"mes-current-type-btn\"\n    }\n  }, [_c('Icon', {\n    directives: [{\n      name: \"show\",\n      rawName: \"v-show\",\n      value: (_vm.currentMessageType === 'recyclebin'),\n      expression: \"currentMessageType === 'recyclebin'\"\n    }],\n    attrs: {\n      \"type\": \"checkmark\"\n    }\n  })], 1), _c('span', {\n    staticClass: \"mes-type-btn-text\"\n  }, [_vm._v(\"回收站\")]), _c('Badge', {\n    staticClass: \"message-count-badge-outer\",\n    attrs: {\n      \"class-name\": \"message-count-badge\",\n      \"count\": _vm.recyclebinCount\n    }\n  })], 1)], 1)]), _vm._v(\" \"), _c('div', {\n    staticClass: \"message-content-con\"\n  }, [_c('transition', {\n    attrs: {\n      \"name\": \"view-message\"\n    }\n  }, [(_vm.showMesTitleList) ? _c('div', {\n    staticClass: \"message-title-list-con\"\n  }, [_c('Table', {\n    ref: \"messageList\",\n    attrs: {\n      \"columns\": _vm.mesTitleColumns,\n      \"data\": _vm.currentMesList,\n      \"no-data-text\": _vm.noDataText\n    }\n  })], 1) : _vm._e()]), _vm._v(\" \"), _c('transition', {\n    attrs: {\n      \"name\": \"back-message-list\"\n    }\n  }, [(!_vm.showMesTitleList) ? _c('div', {\n    staticClass: \"message-view-content-con\"\n  }, [_c('div', {\n    staticClass: \"message-content-top-bar\"\n  }, [_c('span', {\n    staticClass: \"mes-back-btn-con\"\n  }, [_c('Button', {\n    attrs: {\n      \"type\": \"text\"\n    },\n    on: {\n      \"click\": _vm.backMesTitleList\n    }\n  }, [_c('Icon', {\n    attrs: {\n      \"type\": \"chevron-left\"\n    }\n  }), _vm._v(\"  返回\")], 1)], 1), _vm._v(\" \"), _c('h3', {\n    staticClass: \"mes-title\"\n  }, [_vm._v(_vm._s(_vm.mes.title))])]), _vm._v(\" \"), _c('p', {\n    staticClass: \"mes-time-con\"\n  }, [_c('Icon', {\n    attrs: {\n      \"type\": \"android-time\"\n    }\n  }), _vm._v(\"  \" + _vm._s(_vm.mes.time))], 1), _vm._v(\" \"), _c('div', {\n    staticClass: \"message-content-body\"\n  }, [_c('p', {\n    staticClass: \"message-content\"\n  }, [_vm._v(_vm._s(_vm.mes.content))])])]) : _vm._e()])], 1)])\n},staticRenderFns: []}\nmodule.exports.render._withStripped = true\nif (module.hot) {\n  module.hot.accept()\n  if (module.hot.data) {\n     require(\"vue-loader/node_modules/vue-hot-reload-api\").rerender(\"data-v-4a8089d6\", module.exports)\n  }\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/vue-loader/lib/template-compiler?{\"id\":\"data-v-4a8089d6\"}!./~/vue-loader/lib/selector.js?type=template&index=0!./src/views/message/message.vue\n// module id = 826\n// module chunks = 16"],"sourceRoot":""}